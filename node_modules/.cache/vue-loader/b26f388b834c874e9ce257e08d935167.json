{"remainingRequest":"/Users/yuanchenyu/Downloads/vue-login-demo-master/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/yuanchenyu/Downloads/vue-login-demo-master/src/views/login/Login.vue?vue&type=style&index=0&id=2529d779&scoped=true&lang=css&","dependencies":[{"path":"/Users/yuanchenyu/Downloads/vue-login-demo-master/src/views/login/Login.vue","mtime":1644075760000},{"path":"/Users/yuanchenyu/Downloads/vue-login-demo-master/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yuanchenyu/Downloads/vue-login-demo-master/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/yuanchenyu/Downloads/vue-login-demo-master/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/yuanchenyu/Downloads/vue-login-demo-master/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yuanchenyu/Downloads/vue-login-demo-master/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgovKiDorr7nva7nmbvlvZXpnaLmnb/lsYXkuK3vvIzlrr3luqbkuLo0MDBweCAqLwouYm94LWNhcmQgewogIG1hcmdpbjogYXV0byBhdXRvOwogIHdpZHRoOiA0MDBweDsKfQovKiDorr7nva7nmbvlvZXpnaLmnb/kuK3nmoTooajljZXlsYXkuK0gKi8KLmxvZ2luLWZyb20gewogIG1hcmdpbjogYXV0byBhdXRvOwp9Cg=="},{"version":3,"sources":["Login.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Login.vue","sourceRoot":"src/views/login","sourcesContent":["<template>\n  <div>\n    <el-card class=\"box-card\">\n      <h2>登录</h2>\n      <el-form\n        :model=\"ruleForm\"\n        status-icon\n        :rules=\"rules\"\n        ref=\"ruleForm\"\n        label-position=\"left\"\n        label-width=\"70px\"\n        class=\"login-from\"\n      >\n        <el-form-item label=\"用户名\" prop=\"uname\">\n          <el-input v-model=\"ruleForm.uname\"></el-input>\n        </el-form-item>\n        <el-form-item label=\"密码\" prop=\"password\">\n          <el-input\n            type=\"password\"\n            v-model=\"ruleForm.password\"\n            autocomplete=\"off\"\n          ></el-input>\n        </el-form-item>\n      </el-form>\n      <div class=\"btnGroup\">\n        <el-button\n          type=\"primary\"\n          @click=\"submitForm('ruleForm')\"\n          v-loading=\"loading\"\n          >登录</el-button\n        >\n        <el-button @click=\"resetForm('ruleForm')\">重置</el-button>\n        <router-link to=\"/register\">\n          <el-button style=\"margin-left: 10px\">注册</el-button>\n        </router-link>\n      </div>\n    </el-card>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      ruleForm: {\n        uname: \"\",\n        password: \"\",\n      },\n      rules: {\n        uname: [\n          { required: true, message: \"用户名不能为空！\", trigger: \"blur\" },\n        ],\n        password: [\n          { required: true, message: \"密码不能为空！\", trigger: \"blur\" },\n        ],\n      },\n      loading: false, // 是否显示加载动画\n    };\n  },\n  methods: {\n    submitForm(formName) {\n      // 验证表单中的账号密码是否有效，因为在上面rules中定义为了必填 required: true\n      this.$refs[formName].validate((valid) => {\n        // 点击登录后，让登录按钮开始转圈圈（展示加载动画）\n        this.loading = true;\n        // 如果经过校验，账号密码都不为空，则发送请求到后端登录接口\n        if (valid) {\n          let _this = this;\n          // 使用 axios 将登录信息发送到后端\n          this.axios({\n            url: \"/api/user/login\",               // 请求地址\n            method: \"post\",                       // 请求方法\n            headers: {                            // 请求头\n              \"Content-Type\": \"application/json\",\n            },\n            params: {                             // 请求参数\n              uname: _this.ruleForm.uname,\n              password: _this.ruleForm.password,\n            },\n          }).then((res) => { // 当收到后端的响应时执行该括号内的代码，res 为响应信息，也就是后端返回的信息\n            if (res.data.code === \"0\") {  // 当响应的编码为 0 时，说明登录成功\n              // 将用户信息存储到sessionStorage中\n              sessionStorage.setItem(\"userInfo\", JSON.stringify(res.data.data));\n              // 跳转页面到首页\n              this.$router.push('/home');\n              // 显示后端响应的成功信息\n              this.$message({\n                message: res.data.msg,\n                type: \"success\",\n              });\n            } else {  // 当响应的编码不为 0 时，说明登录失败\n              // 显示后端响应的失败信息\n              this.$message({\n                message: res.data.msg,\n                type: \"warning\",\n              });\n            }\n            // 不管响应成功还是失败，收到后端响应的消息后就不再让登录按钮显示加载动画了\n            _this.loading = false;\n            console.log(res);\n          });\n        } else {  // 如果账号或密码有一个没填，就直接提示必填，不向后端请求\n          console.log(\"error submit!!\");\n          this.loading = false;\n          return false;\n        }\n      });\n    },\n    resetForm(formName) {\n      this.$refs[formName].resetFields();\n    },\n  },\n};\n</script>\n\n<style scoped>\n/* 设置登录面板居中，宽度为400px */\n.box-card {\n  margin: auto auto;\n  width: 400px;\n}\n/* 设置登录面板中的表单居中 */\n.login-from {\n  margin: auto auto;\n}\n</style>"]}]}